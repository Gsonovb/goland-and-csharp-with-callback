/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package demo/golangioc/v4 */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"




#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <mycallback.h>

typedef struct CallBackEvent{
	char EventId[64];
	char EventName[32];
	char EventTime[64];
	char UserAppId[64];
	char *EventData;
}CallBackEvent;

typedef void (*CallBack)(void*);//函数指针
extern void C_callback(void*);
extern CallBack _cb;  //函数指针的类型

extern void LogMessage_cgo(char* msg); // Forward declaration.


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// 比较数值
//
extern __declspec(dllexport) GoUint8 Check(GoInt i1, GoInt i2);

// 生成字符串
//
extern __declspec(dllexport) char* GetSlogan(char* name);
extern __declspec(dllexport) void Free(void* p);

// 初始化 日志
//
extern __declspec(dllexport) void InitLog();
extern __declspec(dllexport) void LogMessage(char* msg);

// 初始化 回调函数1 并设置 Gin1 实例 和端口
//
extern __declspec(dllexport) void InitCallBack1(void* cb, GoInt port);

// 测试回调函数
//
extern __declspec(dllexport) void TestCallBack1();

// 初始化 回调函数2 并设置 Gin2 实例 和端口
//
extern __declspec(dllexport) void InitCallBack2(void* cb, GoInt port);

// 测试回调函数2
//
extern __declspec(dllexport) void TestCallBack2();

// 初始化 回调函数3 并设置 Gin3 实例 和端口
//
extern __declspec(dllexport) void InitCallBack3(void* cb, GoInt port);

// 测试回调函数3
//
extern __declspec(dllexport) void TestCallBack3();

// 初始化 回调函数4
//
extern __declspec(dllexport) void InitCallBack4(void* cb, GoInt port);

// 测试回调函数4
//
extern __declspec(dllexport) void TestCallBack4();

#ifdef __cplusplus
}
#endif
